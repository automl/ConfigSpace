# Workflow to build and test wheels
# =================================
# This github action gets triggered whenever there
# is a push to the master branch or a release is created. 
# It generates both wheels and distributions files, 
# making sure their contents are correct via unit-testing.
#
# However, only in the case of a github release, the assets
# are uploaded and attached to a release. In other words, we
# expect the following workflow:
# 1- users adds new features to the master branch via PRs. Every
#    time a new feature gets merged to the master branch, this github
#    action gets triggered, and wheels/distribution files are generated
#    to make sure this new change did not break the distribution files.
# 2- Whenever there is enough PRs in the master branch, we expect the user
#    to create a release following github guidelines from here:
#    https://docs.github.com/en/github/administering-a-repository/releasing-projects-on-github/managing-releases-in-a-repository
#    During a github release, you create a tagged-version (something like v2.3.4.), 
#    add a title to the release and a description. Then you publish the release via the
#    publish-button. This effectively creates a github release, triggering this action.
#    When this triggered action finished, the release files are automatically uploaded 
#    to your github release page. Check for example:
#    https://github.com/automl/ConfigSpace/releases
#
# Please note that creating a git tag and pushing it (git tag <>; git push --tags) is not
# sufficient to append the wheels and distribution files to your release.
# You need to generate a new release using github, not git.

name: Wheel builder

on:
  push:
    branches:
      - master
      # Release branches
      - "[0-9]+.[0-9]+.X"
  create:
    tags:
      - v*

jobs:
  # Build the wheels for Linux
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: [36, 37, 38, 39]
        bitness: [32, 64]
        manylinux_image: [manylinux2014]
        include:
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            bitness: 32
            platform_id: manylinux_i686

    steps:
      - name: Checkout ConfigSpace
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build and test wheels
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_TEST_REQUIRES: pytest threadpoolctl numpy
          CIBW_TEST_COMMAND: pytest -v /project/test

        run: |
          python -m pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ConfigSpace
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build source distribution
        run: python setup.py sdist

        # Full unit-testing is handled in pytest.yml
      - name: Twine check
        run: |
          pip install twine
          last_dist=$(ls -t dist/ConfigSpace-*.tar.gz | head -n 1)
          twine_output=`twine check "$last_dist"`
          if [[ "$twine_output" != "Checking $last_dist: PASSED" ]]; then echo $twine_output && exit 1;fi
      - name: Install dist
        run: |
          last_dist=$(ls -t dist/ConfigSpace-*.tar.gz | head -n 1)
          pip install $last_dist
      - name: PEP 561 Compliance
        run: |
          pip install mypy
          cd ..  # required to use the installed version of ConfigSpace
          if ! python -c "import ConfigSpace"; then exit 1; fi

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  # Upload the wheels and the source distribution
  release_assets:
    name: Upload Release
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    # Only on a tagged release, push
    if: startsWith(github.ref, 'refs/tags/v')  && github.event_name != 'pull_request'

    steps:
      - name: Checkout ConfigSpace
        uses: actions/checkout@v1

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Upload Release Asset
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="${GITHUB_REF##*/}"
          echo Uploading `(find ./dist -type f -printf "-a %p ")`
          hub release edit $(find ./dist -type f -printf "-a %p ") -m "" "$tag_name"
