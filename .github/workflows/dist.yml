name: Build sdist

on:
  workflow_dispatch:

  push:
    branches:
      - master
      # Release branches
      - "[0-9]+.[0-9]+.X"

  # TODO: delete me
  pull_request:
    branches:
      - master

  create:
    tags:
      - v*

env:
  package-name: ConfigSpace
  python-version: "3.7"

jobs:

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ${{ env.package-name }}
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Build source distribution
        run: python setup.py sdist

        # Full unit-testing is handled in pytest.yml
      - name: Twine check
        run: |
          pip install twine
          last_dist=$(ls -t dist/${{ env.package-name }}-*.tar.gz | head -n 1)
          twine_output=`twine check "$last_dist"`
          if [[ "$twine_output" != "Checking $last_dist: PASSED" ]]; then
            echo $twine_output && exit 1;
          fi

      - name: Install dist
        run: |
          last_dist=$(ls -t dist/${{ env.package-name }}-*.tar.gz | head -n 1)
          pip install $last_dist

      - name: PEP 561 Compliance
        run: |
          pip install mypy
          cd ..  # required to use the installed version
          if ! python -c "import ${{ env.package-name }}"; then exit 1; fi

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  # Upload the source distribution
  release_assets:
    name: Upload Release
    runs-on: ubuntu-latest
    needs: build_sdist

    # Only on a tagged release, push
    if: startsWith(github.ref, 'refs/tags/v')  && github.event_name != 'pull_request'

    steps:
      - name: Checkout ${{ env.package-name }}
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Upload Release Asset
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="${GITHUB_REF##*/}"
          echo Uploading `(find ./dist -type f -printf "-a %p ")`
          hub release edit $(find ./dist -type f -printf "-a %p ") -m "" "$tag_name"
